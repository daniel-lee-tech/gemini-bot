{"version":3,"sources":["App.tsx","reportWebVitals.js","routes/login.tsx","components/FormirkFormControl/formik-form-control.tsx","schemas/RegisterDTO.ts","axios/axios.ts","constants/urls.ts","routes/register.tsx","index.tsx"],"names":["App","queryClient","QueryClient","client","to","initialIsOpen","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Login","style","padding","FormikFormControl","props","fieldName","formik","fieldType","helperText","fieldLabel","hasError","touched","Boolean","errors","FormControl","fullWidth","variant","InputLabel","htmlFor","Input","type","name","id","value","values","onChange","handleChange","error","FormHelperText","RegisterDTOValidationSchema","yup","email","matches","required","plainTextPassword","min","plainTextPasswordConfirmation","oneOf","axiosConfig","baseURL","Register","useState","formIsSubmitting","setFormIsSubmitting","submitMessage","setSubmitMessage","useFormik","initialValues","validationSchema","onSubmit","customConfig","axios","create","axiosInstance","post","successResponse","data","message","catch","errorResponse","response","undefined","alert","Box","width","maxWidth","margin","CircularProgress","action","handleSubmit","Button","sx","height","marginTop","size","ReactDOM","render","StrictMode","path","element","document","getElementById"],"mappings":"6PAMA,SAASA,IACP,IAAMC,EAAc,IAAIC,cAExB,OACE,eAAC,sBAAD,CAAqBC,OAAQF,EAA7B,UACE,gCACE,cAAC,IAAD,CAAMG,GAAG,YAAT,sBADF,MACyC,cAAC,IAAD,CAAMA,GAAG,SAAT,mBACvC,cAAC,IAAD,OAEF,cAAC,qBAAD,CAAoBC,eAAe,OCfzC,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCPd,SAASQ,IACP,OACE,sBAAMC,MAAO,CAAEC,QAAS,UAAxB,SACE,yC,0ECCN,SAASC,EAAkBC,GACzB,IAAQC,EAAyDD,EAAzDC,UAAWC,EAA8CF,EAA9CE,OAAQC,EAAsCH,EAAtCG,UAAWC,EAA2BJ,EAA3BI,WAAYC,EAAeL,EAAfK,WAElD,SAASC,IACP,OAAOJ,EAAOK,QAAQN,IAAcO,QAAQN,EAAOO,OAAOR,IAG5D,OACE,eAACS,EAAA,EAAD,CAAaC,WAAS,EAACC,QAAQ,WAA/B,UACE,cAACC,EAAA,EAAD,CAAYC,QAASb,EAArB,SAAiCI,IACjC,cAACU,EAAA,EAAD,CACEJ,WAAS,EACTK,KAAMb,EACNc,KAAMhB,EACNiB,GAAIjB,EACJ,6BAAqBA,EAArB,gBACAkB,MAAOjB,EAAOkB,OAAOnB,GACrBoB,SAAUnB,EAAOoB,aACjBC,MAAOjB,MAET,cAACkB,EAAA,EAAD,CAAgBD,MAAOjB,IAAYY,GAAE,UAAKjB,EAAL,gBAArC,SACGK,IAAaJ,EAAOO,OAAOR,GAAaG,O,YChB3CqB,EAAqDC,IACjD,CACNC,MAAOD,MAEJE,QACC,kDACA,oBAEDC,WACHC,kBAAmBJ,MAAaG,WAAWE,IAAI,GAC/CC,8BAA+BN,MAE5BG,WACAI,MAAM,CAACP,IAAQ,sBAAuB,0BAE1CG,W,2BCrBGK,EAAkC,CAAEC,QCEjC,8BCST,SAASC,IACP,MAAgDC,oBAAS,GAAzD,mBAAOC,EAAP,KAAyBC,EAAzB,KACA,EAA0CF,mBAAS,IAAnD,mBAAOG,EAAP,KAAsBC,EAAtB,KAEMvC,EAASwC,YAAU,CACvBC,cAAe,CACbhB,MAAO,GACPG,kBAAmB,GACnBE,8BAA+B,IAEjCY,iBAAkBnB,EAClBoB,SAAU,SAACzB,GACTmB,GAAoB,GFrBJ,eAACO,EAAD,uDAAoCZ,EAApC,OACpBa,IAAMC,OAAOF,GEqBTG,GACGC,KDnBA,iBCmBwB9B,GACxB9B,MAAK,SAAC6D,GACL,IAAMC,EAAyBD,EAAgBC,KAC/CX,EAAiBW,EAAKC,SACtBd,GAAoB,MAErBe,OAAM,SAACC,GAAiD,IAAD,EAChDH,EAAkC,OACtCG,QADsC,IACtCA,GADsC,UACtCA,EAAeC,gBADuB,aACtC,EAAyBJ,UAEdK,IAATL,EACFM,MACE,oFAGFjB,EAAiBW,EAAKC,SACtBd,GAAoB,UAM9B,OACE,cAACoB,EAAA,EAAD,CAAKC,MAAM,OAAOC,SAAS,QAAQC,OAAO,OAA1C,SACGxB,EACC,cAACyB,EAAA,EAAD,IAEA,uBAAMC,OAAO,OAAOnB,SAAU3C,EAAO+D,aAArC,UACE,4BAAIzB,IACJ,2CAEA,cAACzC,EAAD,CACEG,OAAQA,EACRG,WAAY,QACZJ,UAAW,QACXE,UAAW,QACXC,WAAY,iCAGd,cAACL,EAAD,CACEM,WAAY,WACZH,OAAQA,EACRD,UAAW,oBACXE,UAAU,WACVC,WAAY,0CAGd,cAACL,EAAD,CACEM,WAAY,mBACZH,OAAQA,EACRD,UAAU,gCACVE,UAAU,WACVC,WAAY,qCAGd,cAAC8D,EAAA,EAAD,CACEC,GAAI,CAAEC,OAAQ,GAAIC,UAAW,GAC7B1D,WAAS,EACT2D,KAAK,QACL1D,QAAQ,YACRI,KAAK,SALP,yBC1EVuD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,eAAC,IAAD,CAAOC,KAAK,IAAIC,QAAS,cAAC,EAAD,IAAzB,UACE,cAAC,IAAD,CAAOD,KAAK,QAAQC,QAAS,cAAC/E,EAAD,MAC7B,cAAC,IAAD,CAAO8E,KAAK,WAAWC,QAAS,cAACvC,EAAD,eAKxCwC,SAASC,eAAe,SAM1B1F,M","file":"static/js/main.bb97dc19.chunk.js","sourcesContent":["import \"./App.css\";\n\nimport { Link, Outlet } from \"react-router-dom\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { ReactQueryDevtools } from \"react-query/devtools\";\n\nfunction App() {\n  const queryClient = new QueryClient();\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <div>\n        <Link to=\"/register\">Register</Link> | <Link to=\"/login\">Login</Link>\n        <Outlet />\n      </div>\n      <ReactQueryDevtools initialIsOpen={false} />\n    </QueryClientProvider>\n  );\n}\n\nexport { App };\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","function Login(): JSX.Element {\n  return (\n    <main style={{ padding: \"1rem 0\" }}>\n      <h2>Login</h2>\n    </main>\n  );\n}\n\nexport { Login };\n","import { ReactElement } from \"react\";\nimport { FormControl, FormHelperText, Input, InputLabel } from \"@mui/material\";\nimport { FormikFormControlProps } from \"./types\";\n\nfunction FormikFormControl(props: FormikFormControlProps): ReactElement {\n  const { fieldName, formik, fieldType, helperText, fieldLabel } = props;\n\n  function hasError(): boolean {\n    return formik.touched[fieldName] && Boolean(formik.errors[fieldName]);\n  }\n\n  return (\n    <FormControl fullWidth variant=\"standard\">\n      <InputLabel htmlFor={fieldName}>{fieldLabel}</InputLabel>\n      <Input\n        fullWidth\n        type={fieldType}\n        name={fieldName}\n        id={fieldName}\n        aria-describedby={`${fieldName}-describedby`}\n        value={formik.values[fieldName]}\n        onChange={formik.handleChange}\n        error={hasError()}\n      />\n      <FormHelperText error={hasError()} id={`${fieldName}-describedby`}>\n        {hasError() ? formik.errors[fieldName] : helperText}\n      </FormHelperText>\n    </FormControl>\n  );\n}\n\nexport { FormikFormControl };\n","import * as yup from \"yup\";\nimport { SchemaOf } from \"yup\";\n\ninterface RegisterDTO {\n  email: string;\n  plainTextPassword: string;\n  plainTextPasswordConfirmation: string;\n}\n\nconst RegisterDTOValidationSchema: SchemaOf<RegisterDTO> = yup\n  .object({\n    email: yup\n      .string()\n      .matches(\n        /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/,\n        \"Must be an email\"\n      )\n      .required(),\n    plainTextPassword: yup.string().required().min(8),\n    plainTextPasswordConfirmation: yup\n      .string()\n      .required()\n      .oneOf([yup.ref(\"plainTextPassword\")], \"Passwords must match\"),\n  })\n  .required();\n\nexport { RegisterDTOValidationSchema };\nexport type { RegisterDTO };\n","import { urlPrefix } from \"../constants/urls\";\nimport axios, { AxiosRequestConfig } from \"axios\";\n\nconst axiosConfig: AxiosRequestConfig = { baseURL: urlPrefix() };\n\nconst axiosInstance = (customConfig: AxiosRequestConfig = axiosConfig) =>\n  axios.create(customConfig);\n\nexport { axiosInstance };\n","const urlPrefix = (): string => {\n  if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\n    return \"http://localhost:8080\";\n  }\n\n  return \"https://www.gemini-bot.com\";\n};\n\nconst userRegisterUrl = (): string => {\n  return \"/user/register\";\n};\n\nexport { urlPrefix, userRegisterUrl };\n","import { Box, Button } from \"@mui/material\";\nimport { ReactElement, useState } from \"react\";\nimport { useFormik } from \"formik\";\nimport { FormikFormControl } from \"../components/FormirkFormControl/formik-form-control\";\nimport {\n  RegisterDTO,\n  RegisterDTOValidationSchema,\n} from \"../schemas/RegisterDTO\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport { AxiosError, AxiosResponse } from \"axios\";\nimport { userRegisterUrl } from \"../constants/urls\";\nimport { axiosInstance } from \"../axios/axios\";\nimport { RegisterResponse } from \"../types/axios-responses/RegisterResponse\";\n\nfunction Register(): ReactElement {\n  const [formIsSubmitting, setFormIsSubmitting] = useState(false);\n  const [submitMessage, setSubmitMessage] = useState(\"\");\n\n  const formik = useFormik({\n    initialValues: {\n      email: \"\",\n      plainTextPassword: \"\",\n      plainTextPasswordConfirmation: \"\",\n    },\n    validationSchema: RegisterDTOValidationSchema,\n    onSubmit: (values: RegisterDTO) => {\n      setFormIsSubmitting(true);\n      axiosInstance()\n        .post(userRegisterUrl(), values)\n        .then((successResponse: AxiosResponse<RegisterResponse>) => {\n          const data: RegisterResponse = successResponse.data;\n          setSubmitMessage(data.message);\n          setFormIsSubmitting(false);\n        })\n        .catch((errorResponse: AxiosError<RegisterResponse>) => {\n          const data: RegisterResponse | undefined =\n            errorResponse?.response?.data;\n\n          if (data === undefined) {\n            alert(\n              \"Something went wrong, please let us know your issue by contacting us. So sorry!\"\n            );\n          } else {\n            setSubmitMessage(data.message);\n            setFormIsSubmitting(false);\n          }\n        });\n    },\n  });\n\n  return (\n    <Box width=\"100%\" maxWidth=\"800px\" margin=\"auto\">\n      {formIsSubmitting ? (\n        <CircularProgress />\n      ) : (\n        <form action=\"POST\" onSubmit={formik.handleSubmit}>\n          <p>{submitMessage}</p>\n          <h2> Register</h2>\n\n          <FormikFormControl\n            formik={formik}\n            fieldLabel={\"Email\"}\n            fieldName={\"email\"}\n            fieldType={\"email\"}\n            helperText={\"An email will be sent to you\"}\n          />\n\n          <FormikFormControl\n            fieldLabel={\"Password\"}\n            formik={formik}\n            fieldName={\"plainTextPassword\"}\n            fieldType=\"password\"\n            helperText={\"Password must be 8 characters or more\"}\n          />\n\n          <FormikFormControl\n            fieldLabel={\"Confirm Password\"}\n            formik={formik}\n            fieldName=\"plainTextPasswordConfirmation\"\n            fieldType=\"password\"\n            helperText={\"Please input your password again\"}\n          />\n\n          <Button\n            sx={{ height: 50, marginTop: 3 }}\n            fullWidth\n            size=\"large\"\n            variant=\"contained\"\n            type=\"submit\"\n          >\n            Submit\n          </Button>\n        </form>\n      )}\n    </Box>\n  );\n}\n\nexport { Register };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter, Route, Routes } from \"react-router-dom\";\nimport { Login } from \"./routes/login\";\nimport { Register } from \"./routes/register\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Routes>\n        <Route path=\"/\" element={<App />}>\n          <Route path=\"login\" element={<Login />} />\n          <Route path=\"register\" element={<Register />} />\n        </Route>\n      </Routes>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}